内存管理分为几个部分：
1 物理页框的分配
・__get_free_page 基础，用于分配或回收一个或多个物理页
・kmalloc，vmalloc 用于高级一点的分配
  kmalloc是基于slab的。
  kmalloc会不会用于应用层进程的内存分配?看mmap的实现,是通过缺页的，应该也有直接分配内存
的，否则的话所有的都要缺页？
・mmap，setbrk
  用于进程分配地址空间。在page_fault时分配内存。这里调用路线很长，找其中一种看下，确实是缺页引起而不是写保护的：
  do_page_fault -> handle_mm_fault -> handle_pte_fault -> do_anonymous_page -> alloc_zeroed_user_highpage_movable -> __alloc_zeroed_user_highpage -> alloc_page_vma -> __alloc_pages_nodemask -> __alloc_pages_slowpath -> __alloc_pages_direct_compact -> too long :)
2 物理页框回收
回收的时机：定期回收，oom
3 
